import yaml
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--config', default='config.yaml', help='configuration file')

args = parser.parse_args()

with open(args.config, 'r') as ymlfile:
    cfg = yaml.load(ymlfile)

# read config
input_folder = cfg['input_folder']
output_folder = cfg['output_folder']

# create output folder if it does not exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# read all files in input folder
for filename in os.listdir(input_folder):
    if filename.endswith(".jpg"): 
        # read image
        img = cv2.imread(input_folder + filename)
        # resize image
        img = cv2.resize(img, (640, 480))
        # convert image to grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        # detect faces
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        # loop over the faces
        for (x, y, w, h) in faces:
            # draw rectangle around face
            cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)
            # crop face from image
            face = img[y:y+h, x:x+w]
            # save face image
            cv2.imwrite(output_folder + filename, face)
import sys
import os
import argparse
import re
import ipaddress
from pathlib import Path

# create a requirements.txt for the imports above
